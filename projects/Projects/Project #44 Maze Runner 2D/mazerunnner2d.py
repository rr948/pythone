"""Maze Runner 2D, by Al Sweigart al@inventwithpython.com
Move around a maze and try to escape. Maze files are generated by
mazemakerrec.py.
View the original code at https://nostarch.com/big-book-small-python-projects
Tags: large, game, maze"""

import sys, os

# Maze file constants:
WALL = '#'
EMPTY = ' '
START = 'S'
EXIT = 'E'

PLAYER = '@'  # TODO: Try changing this to '+' or 'o'
BLOCK = chr(9617)  # Character 9617 is 'â–‘'


def display_maze(maze):
    # Display the maze:
    for y in range(HEIGHT):
        for x in range(WIDTH):
            if (x, y) == (player_x, player_y):
                print(PLAYER, end='')
            elif (x, y) == (exit_x, exit_y):
                print('X', end='')
            elif maze[(x, y)] == WALL:
                print(BLOCK, end='')
            else:
                print(maze[(x, y)], end='')
        print()  # Print a newline after printing the row.


print('''Maze Runner 2D, by Al Sweigart al@inventwithmpython.com

(Maze files are generated by mazemakerrec.py)''')

# Get the maze file's filename from the user:
os.chdir('maze_files')

while True:
    print('Enter the filename of the maze (or LIST or QUIT):')
    filename = input('> ')

    # List all the maze files in the current folders:
    if filename.upper() == 'LIST':
        print('Maze files found in', os.getcwd())
        for file_in_current_folder in os.listdir():
            if (file_in_current_folder.startswith('maze') and
                    file_in_current_folder.endswith('.txt')):
                print('  ', file_in_current_folder)
        continue

    if filename.upper() == 'QUIT':
        sys.exit()

    if os.path.exists(filename):
        break
    print('There is no file named', filename)

# Load the maze from a file:
maze_file = open(filename)
maze = {}
lines = maze_file.readlines()
player_x = None
player_y = None
exit_x = None
exit_y = None
y = 0
for line in lines:
    WIDTH = len(line.rstrip())
    for x, character in enumerate(line.rstrip()):
        assert character in (WALL, EMPTY, START, EXIT), f'Invalid character at column {x + 1}. line {y + 1}'
        if character in (WALL, EMPTY):
            maze[(x, y)] = character
        elif character == START:
            player_x, player_y = x, y
            maze[(x, y)] = EMPTY
        elif character == EXIT:
            exit_x, exit_y = x, y
            maze[(x, y)] = EMPTY
    y += 1
HEIGHT = y

assert player_x != None and player_y != None, 'No start in maze file.'
assert exit_x != None and exit_y != None, 'No exit in maze file.'

while True:  # Main game loop
    display_maze(maze)

    while True:  # Get user move.
        print('                           W')
        print('Enter direction, or QUIT: ASD')
        move = input('> ').upper()

        if move == 'QUIT':
            print('Thanks for playing!')
            sys.exit()

        if move not in ['W', 'A', 'S', 'D']:
            print('Invalid direction. Enter one of W, A, S, or D.')
            continue

        # Check if the player can move in that direction:
        if move == 'W' and maze[(player_x, player_y - 1)] == EMPTY:
            break
        elif move == 'S' and maze[(player_x, player_y + 1)] == EMPTY:
            break
        elif move == 'A' and maze[(player_x - 1, player_y)] == EMPTY:
            break
        elif move == 'D' and maze[(player_x + 1, player_y)] == EMPTY:
            break

        print('You cannot move in that direction.')

    # Keep moving in this direction until you encounter a branch point.
    if move == 'W':
        while True:
            player_y -= 1
            if (player_x, player_y) == (exit_x, exit_y):
                break
            if maze[(player_x, player_y - 1)] == WALL:
                break  # Break if we've hit a wall.
            if (maze[(player_x - 1, player_y)] == EMPTY
                or maze[(player_x + 1, player_y)] == EMPTY):
                break  # Break if we've reached a branch point.
    elif move == 'S':
        while True:
            player_y += 1
            if (player_x, player_y) == (exit_x, exit_y):
                break
            if maze[(player_x, player_y + 1)] == WALL:
                break  # Break if we've hit a wall.
            if (maze[(player_x - 1, player_y)] == EMPTY
            or maze[(player_x + 1, player_y)] == EMPTY):
                break  # Break if we've reached a branch point.
    elif move == 'A':
        while True:
            player_x -= 1
            if (player_x, player_y) == (exit_x, exit_y):
                break
            if maze[(player_x - 1, player_y)] == WALL:
                break  # Break if we've hit a wall.
            if (maze[(player_x, player_y - 1)] == EMPTY
                    or maze[(player_x, player_y + 1)] == EMPTY):
                break  # Break if we've reached a branch point.
    elif move == 'D':
        while True:
            player_x += 1
            if (player_x, player_y) == (exit_x, exit_y):
                break
            if maze[(player_x + 1, player_y)] == WALL:
                break  # Break if we've hit a wall.
            if (maze[(player_x, player_y - 1)] == EMPTY
                    or maze[(player_x, player_y + 1)] == EMPTY):
                break  # Break if we've reached a branch point.

    if (player_x, player_y) == (exit_x, exit_y):
        display_maze(maze)
        print('You have reached the exit! Good job!')
        print('Thanks for playing!')
        sys.exit()